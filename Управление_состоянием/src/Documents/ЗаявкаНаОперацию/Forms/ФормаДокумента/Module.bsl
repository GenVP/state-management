// https://gist.github.com/KalyakinAG/88588b2c3925f8a465851bce52dbab13
#Область УправлениеСостоянием

&НаСервере
Процедура ОбновитьФормуНаСервере(ИзмененныеРеквизиты = Неопределено, СохраненноеСостояние = Неопределено)
	РаботаСФормойКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(ИзмененныеРеквизиты = Неопределено)
	Перем СохраненноеСостояние;
	Если НЕ РаботаСФормойКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние) Тогда
		ОбновитьФормуНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

//@skip-warning
&НаКлиенте
Процедура ПриАктивизацииСтроки(Элемент)
	РаботаСФормойКлиентСервер.ПриАктивизацииСтроки(ЭтотОбъект, Элемент);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСФормойКлиентСервер.НачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#Область ПриИзменении // При расчете может потребоваться изменить контекст, а сделать это можно только в модуле формы

//@skip-warning
//  Процедура продолжает расчет уже в контексте сервера. Такое разделение процедуры нужно для программного переключения контекста
&НаСервере
Процедура РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние)
	РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние);
	ОбновитьФормуНаСервере(ИзмененныеРеквизиты);
КонецПроцедуры

//  Процедура выполняет расчет в контексте клиента
&НаКлиенте
Процедура РассчитатьСостояние(ИзмененныеРеквизиты)
	Перем СохраненноеСостояние;
	Если НЕ РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние) Тогда
		РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние);
	Иначе
		ОбновитьФорму(ИзмененныеРеквизиты);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПриИзменении(Элемент)
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	Параметр = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьЗначение = ТипЗнч(Элемент) = Тип("ПолеФормы")
		И Элемент.Вид = ВидПоляФормы.ПолеВвода
		И Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	
	Если Параметр.ЭтоЭлементКоллекции Тогда
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор, 
			РаботаСМодельюКлиентСервер.ЗначениеПараметра(ЭтотОбъект, Модель, Модель.Параметры[Параметр.Коллекция + ".ИндексСтроки"],
			ПроверятьЗначение)));
	Иначе
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор,, ПроверятьЗначение));
	КонецЕсли;
	РассчитатьСостояние(ИзмененныеРеквизиты);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//  Инициализация модели объекта
	Модель = Документы.ЗаявкаНаОперацию.Модель(ЭтотОбъект);
	//  Настройка элементов формы и их зависимостей: Элемент формы <- Параметры состояния
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель,,, "ТолькоПросмотр,Номер,ПриходРасход,СуммаДокумента,ВалютаДокумента,ДатаНачала,
	|Контрагент,ВидОперацииБюджетирование,ПометкаУдаления,Проведен,ЭтоНовый");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ФормаОплаты,, "ТипОперацииБюджетирование");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.СчетКонтрагента,, "ФормаОплатыБанк");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.БанковскийСчет,, "ФормаОплатыБанк");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.КонтрагентРасчетов,, "РасчетыЧерезТретьихЛиц");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ДоговорРасчетов,, "РасчетыЧерезТретьихЛиц");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаРасчетыЧерезТретьихЛиц,, "РасчетыЧерезТретьихЛиц");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.СуммаВзаиморасчетов,, "ВалютаВзаиморасчетов,ВалютаДокумента");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ВалютаВзаиморасчетов,, "ВалютаВзаиморасчетов,ВалютаДокумента,ДоговорКонтрагента");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.СтраницаАналитикиБюджетирования,, "ДвиженияОперации");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ДвиженияОперацииСуммаВзаиморасчетов,, "ВалютаВзаиморасчетов,ВалютаДокумента");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ДвиженияОперацииСумма,, "ВалютаДокумента");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаРеквизитыКонтрагента,, "ТипОперацииБюджетирование");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаКонвертацияРасчетов,, "ТипОперацииБюджетирование");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.Страницы,, "ТипОперацииБюджетирование");
	//  Настройка связанных по значению параметров Комментарий <- _Комментарий
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "Комментарий", "_Комментарий", "Комментарий");
	Модель.Параметры["_Комментарий"].Выражение = "Объект.Комментарий";
	Модель.Параметры["Комментарий"].Выражение = "Параметры.Комментарий";
	//  Добавление нового параметра ЭтоНовый
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "ЭтоНовый", "Ссылка");
	Модель.Параметры["Ссылка"].НаСервере = Ложь;
	Модель.Параметры["Ссылка"].ПроверкаЗаполнения = Ложь;
	Модель.Параметры["ЭтоНовый"].Выражение = "НЕ ЗначениеЗаполнено(Объект.Ссылка)";
	//  Связывание модели с объектом и рендеринг
	//Сообщить("Связывание");
	РаботаСМоделью.Инициализировать(ЭтотОбъект, Модель);
	//Сообщить("Рендеринг");
	ОбновитьФормуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ХранилищеЗначений") Тогда
		ОбновитьФормуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьФормуНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	КомандаОбновитьДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаОбновитьДанныеНаСервере()
	Перем ИзмененныеРеквизиты;
	РаботаСМоделью.ОбновитьДанные(ЭтотОбъект, ИзмененныеРеквизиты);
	ОбновитьФормуНаСервере(ИзмененныеРеквизиты);
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьДанныеОбъекта(Команда)
	КомандаИзменитьДанныеОбъектаНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаИзменитьДанныеОбъектаНаСервере()
	Перем ИзмененныеРеквизиты;

	//  Работа с объектом через программный интерфейс
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РаботаСМоделью.Инициализировать(ДокументОбъект);
	
	//  Параметры можно устанавливать парамтеры поотдельности или заполнять по аналогии свойств
//	РаботаСМодельюКлиентСервер.УстановитьЗначение(ДокументОбъект, "Дата",, '20200218', ИзмененныеРеквизиты);
//	РаботаСМодельюКлиентСервер.УстановитьЗначение(ДокументОбъект, "ВалютаДокумента",, Справочники.Валюты.НайтиПоНаименованию("USD"), ИзмененныеРеквизиты);

	//  Заполнение параметров по аналогии свойств (ЗаполнитьЗначенияСвойств)
	РаботаСМодельюКлиентСервер.ЗаполнитьЗначенияПараметров(ДокументОбъект, "Дата, ВалютаДокумента",, Новый Структура("Дата, ВалютаДокумента", '20200218', Справочники.Валюты.НайтиПоНаименованию("USD")), ИзмененныеРеквизиты);
	
	РаботаСМодельюКлиентСервер.РассчитатьСостояние(ДокументОбъект, ИзмененныеРеквизиты);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	//  Обновление параметров модели формы
	РаботаСМодельюКлиентСервер.РассчитатьПроизводныеПараметры(ЭтотОбъект);
	Модифицированность = Истина;
	ОбновитьФормуНаСервере();
КонецПроцедуры


#КонецОбласти
