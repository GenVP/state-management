///////////////////////////////////////////////////////////////////////////////////////////////////////
//  Подсистема "Управление состоянием"
//	Автор: Калякин Андрей Г.
//  Описание размещено на ресурсе: https://infostart.ru/public/1202858/
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область РаботаСФормой

Функция Элемент(Контекст, Модель, ЭлементФормыИлиИмя = "", ФункцияСостояния = "*", Параметры = "", НаСервере = Ложь) Экспорт
	Если (ТипЗнч(ЭлементФормыИлиИмя) = Тип("Строка")) Тогда
		Если ЭлементФормыИлиИмя = "" Тогда
			_Элемент = "ЭтаФорма";
		Иначе
			_Элемент = ЭлементФормыИлиИмя;
		КонецЕсли;
	Иначе
		_Элемент = ЭлементФормыИлиИмя.Имя;
	КонецЕсли;
	Элемент = Модель.Элементы[_Элемент];
	Если Элемент <> Неопределено Тогда
		Возврат Элемент;
	КонецЕсли;
	МассивПараметров = ОбщийКлиентСервер.Массив(Параметры);
	Элемент = Новый Структура("Имя, ФункцияСостояния, Параметры, НаСервере", _Элемент, ФункцияСостояния, МассивПараметров, НаСервере);
	Модель.Элементы[_Элемент] = Элемент;
	Для Каждого _Параметр Из МассивПараметров Цикл
		РаботаСМодельюКлиентСервер.Параметр(Контекст, Модель, _Параметр);
		ДобавитьЗависимость(Модель.ЗависимыеЭлементы, _Параметр, _Элемент);
	КонецЦикла;
	Возврат Элемент;
КонецФункции

Процедура ДобавитьЗависимость(Словарь, Ключ, Значение)
	МассивЗначений = Словарь[Ключ];
	Если МассивЗначений = Неопределено Тогда
		МассивЗначений = Новый Массив;
		Словарь[Ключ] = МассивЗначений;
	ИначеЕсли МассивЗначений.Найти(Значение) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивЗначений.Добавить(Значение);
КонецПроцедуры

Функция Группа(Контекст, Модель, ИмяГруппы, Элементы, ФукнцияСостояния = "*", Параметры, НаСервере = Ложь) Экспорт
	СтруктураГруппы = Новый Структура("Имя, Элементы, ФукнцияСостояния, Параметры, НаСервере, Порядок", ИмяГруппы, СтрРазделить(Элементы, ", ", Ложь), ФукнцияСостояния, СтрРазделить(Параметры, ", ", Ложь), НаСервере, Модель.Группы.Количество());
	Модель.Группы[ИмяГруппы] = СтруктураГруппы;
	//  ЗависимыеГруппы
	Для Каждого Параметр Из СтруктураГруппы.Параметры Цикл
		ДобавитьЗависимость(Модель.ЗависимыеГруппы, Параметр, ИмяГруппы);
	КонецЦикла;
	Возврат СтруктураГруппы;
КонецФункции

Процедура ПроверитьЗаполнениеПараметровВыбора(Форма, Модель, Элемент, Отказ = Ложь) Экспорт
	Параметр = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если Параметр = Неопределено ИЛИ НЕ Параметр.ЭтоСсылка Тогда
		Возврат;
	КонецЕсли;
	Для Каждого _Связь Из Параметр.ВходящиеСвязи Цикл
		Связь = Модель.Связи[_Связь];
		Если Связь.Слабая Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Связь.Источник) Тогда
			ПараметрИсточника = Модель.Параметры[Связь.Источник];
			Если НЕ ПараметрИсточника.ПроверкаЗаполнения Тогда
				Продолжить;
			КонецЕсли;
			Если ПараметрИсточника.ЭтоЭлементКоллекции Тогда
				ПараметрКоллекции = Модель.Параметры[ПараметрИсточника.Коллекция];
				ИмяРеквизита = ОбщийКлиентСервер.ОкончаниеСтрокиПослеРазделителя(ПараметрИсточника.ПутьКДанным, ".");
				ИндексСтроки = РаботаСМодельюКлиентСервер.ЗначениеПараметра(Форма, Модель, Модель.Параметры[ПараметрИсточника.Коллекция+".ИндексСтроки"]);
				Если НЕ РаботаСМодельюКлиентСервер.СвойствоСвязи(Форма, Модель, Связь, ИндексСтроки, "Использование") Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, ПараметрКоллекции))[ИндексСтроки][ИмяРеквизита];
			Иначе
				Если НЕ РаботаСМодельюКлиентСервер.СвойствоСвязи(Форма, Модель, Связь,, "Использование") Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, ПараметрИсточника));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				ТекстСообщения	= "Не заполнено значение "+ПараметрИсточника.Идентификатор;
				Если ПараметрИсточника.ЭтоЭлементКоллекции Тогда
					Поле = СтрШаблон("%1[%2].%3", РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, ПараметрКоллекции.ПутьКДанным), Формат(ПараметрКоллекции.ТекущаяСтрока, "ЧН=0; ЧГ=;"), ИмяРеквизита);
				Иначе
					Поле = ?(ПараметрИсточника.СохраняемыеДанные, Модель.ПутьКДанным + ".", "") + ПараметрИсточника.Идентификатор;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПараметрыВыбора(Форма, Модель, Элемент, Отказ = Ложь) Экспорт
	Параметр = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если Параметр = Неопределено ИЛИ НЕ Параметр.ЭтоСсылка Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыбора = Новый Массив;
	Для Каждого _Связь Из Параметр.ВходящиеСвязи Цикл
		Связь = Модель.Связи[_Связь];
		Если Связь.Слабая Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Связь.Источник) Тогда
			ПараметрИсточника = Модель.Параметры[Связь.Источник];
			Если ПараметрИсточника.ЭтоЭлементКоллекции Тогда
				ПараметрКоллекции = Модель.Параметры[ПараметрИсточника.Коллекция];
				ИмяРеквизита = ОбщийКлиентСервер.ОкончаниеСтрокиПослеРазделителя(ПараметрИсточника.ПутьКДанным, ".");
				ИндексСтроки = РаботаСМодельюКлиентСервер.ЗначениеПараметра(Форма, Модель, Модель.Параметры[ПараметрИсточника.Коллекция+".ИндексСтроки"]);
				Если НЕ РаботаСМодельюКлиентСервер.СвойствоСвязи(Форма, Модель, Связь, ИндексСтроки, "Использование") Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, ПараметрКоллекции))[ИндексСтроки][ИмяРеквизита];
			Иначе
				Если НЕ РаботаСМодельюКлиентСервер.СвойствоСвязи(Форма, Модель, Связь,, "Использование") Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, ПараметрИсточника));
			КонецЕсли;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Связь.ПутьКДанным, ЗначениеПараметра));
		КонецЕсли;
	КонецЦикла;
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
КонецПроцедуры

Функция ОбработанныйЭлемент(Словарь, Ключ, Список = Неопределено, Порядок = 0)
	Если Словарь[Ключ] = Истина Тогда
		Возврат Истина;
	Иначе
		Словарь[Ключ] = Истина;
		Если Список <> Неопределено Тогда
			Список.Добавить(Порядок, Ключ);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура НастроитьЭлемент(Форма, ЭлементыФормы, _Элемент, Свойства)
	Если _Элемент = "ЭтаФорма" Тогда
		ЭлементФормы = Форма;
	Иначе
		ЭлементФормы = ЭлементыФормы[_Элемент];
	КонецЕсли;
	
	Для Каждого ЭлементСвойства Из Свойства Цикл
		Если ЭлементСвойства.Ключ = "ТекущаяСтраница" Тогда
			ОбщийКлиентСервер.УстановитьЗначение(ЭлементФормы[ЭлементСвойства.Ключ], ЭлементыФормы[ЭлементСвойства.Значение]);
		ИначеЕсли ЭлементСвойства.Ключ = "СписокВыбора" Тогда
			ЭлементФормы.СписокВыбора.Очистить();
			Для каждого ЭлементСписка Из ЭлементСвойства.Значение Цикл
				ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦикла;
		ИначеЕсли ЭлементСвойства.Ключ = "ОграничениеТипа" Тогда
			Если ЭлементСвойства.Значение = Неопределено Тогда
				ЭлементФормы.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
			Иначе
				ЭлементФормы.ОграничениеТипа = ЭлементСвойства.Значение;
			КонецЕсли;
		ИначеЕсли ЭлементСвойства.Ключ = "ТекущийЭлемент" Тогда
			Форма.ТекущийЭлемент = ЭлементыФормы[ЭлементСвойства.Значение];
		ИначеЕсли ЭлементСвойства.Ключ = "Свернута" Тогда
			Если ЭлементСвойства.Значение Тогда
				ЭлементФормы.Скрыть();
			Иначе
				ЭлементФормы.Показать();
			КонецЕсли;
		Иначе
			ОбщийКлиентСервер.УстановитьЗначение(ЭлементФормы[ЭлементСвойства.Ключ], ЭлементСвойства.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Настраивает представление и свойства элементов формы через вызов функций состояния.
// Настраивает параметры выбора полей выбора.
//
Функция ОбновитьФорму(Форма, ИзмененныеРеквизиты = Неопределено, Состояние = Неопределено) Экспорт
	Если Состояние = Неопределено Тогда
		Состояние = Новый Структура;
		Состояние.Вставить("ЗависимыеЭлементы", Новый СписокЗначений);
		Состояние.Вставить("ЗависимыеГруппы", Новый СписокЗначений);
		Состояние.Вставить("ОбработанныеЭлементы", Новый Соответствие);
		Состояние.Вставить("ОбработанныеГруппы", Новый Соответствие);
	КонецЕсли;
	ЗависимыеЭлементы = Состояние.ЗависимыеЭлементы;
	ЗависимыеГруппы = Состояние.ЗависимыеГруппы;
	ОбработанныеЭлементы = Состояние.ОбработанныеЭлементы;
	ОбработанныеГруппы = Состояние.ОбработанныеГруппы;
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(Форма);
	Если ИзмененныеРеквизиты = Неопределено Тогда
		Для Каждого ЭлементКоллекции Из Модель.ЗависимыеЭлементы Цикл
			Для Каждого _Элемент Из ЭлементКоллекции.Значение Цикл
				ОбработанныйЭлемент(ОбработанныеЭлементы, _Элемент, ЗависимыеЭлементы);
			КонецЦикла;		
		КонецЦикла;
		Для Каждого ЭлементКоллекции Из Модель.ЗависимыеГруппы Цикл
			Для Каждого _Группа Из ЭлементКоллекции.Значение Цикл
				ОбработанныйЭлемент(ОбработанныеГруппы, _Группа, ЗависимыеГруппы, Модель.Группы[_Группа].Порядок);
			КонецЦикла;		
		КонецЦикла;
		ЗависимыеГруппы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого Элемент Из Форма.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				РаботаСФормойКлиентСервер.УстановитьПараметрыВыбора(Форма, Модель, Элемент);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработанныеПараметры = Новый Соответствие;
		ЭлементыПараметровВыбора = Новый Массив;
		Для Каждого Реквизит Из ИзмененныеРеквизиты Цикл
			_Параметр = Реквизит.Параметр;
			Если ОбработанныйЭлемент(ОбработанныеПараметры, _Параметр) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого _Элемент Из ОбщийКлиентСервер.Массив(Модель.ЗависимыеЭлементы[_Параметр]) Цикл
				ОбработанныйЭлемент(ОбработанныеЭлементы, _Элемент, ЗависимыеЭлементы);
			КонецЦикла;
			Для Каждого _Группа Из ОбщийКлиентСервер.Массив(Модель.ЗависимыеГруппы[_Параметр]) Цикл
				ОбработанныйЭлемент(ОбработанныеГруппы, _Группа, ЗависимыеГруппы, Модель.Группы[_Группа].Порядок);
			КонецЦикла;
			Параметр = Модель.Параметры[_Параметр];
			Для Каждого _Связь Из Параметр.ИсходящиеСвязи Цикл
				ЭлементыПараметров = Модель.ЭлементыПараметров[Модель.Связи[_Связь].Приемник];
				Если ЭлементыПараметров <> Неопределено Тогда
					Для Каждого _Элемент Из ЭлементыПараметров Цикл
						Если ЭлементыПараметровВыбора.Найти(_Элемент) = Неопределено Тогда
							ЭлементыПараметровВыбора.Добавить(_Элемент);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;					
			КонецЦикла;
			Для Каждого _Связь Из Параметр.ЗависимыеСвязи Цикл
				ЭлементыПараметров = Модель.ЭлементыПараметров[Модель.Связи[_Связь].Приемник];
				Если ЭлементыПараметров <> Неопределено Тогда
					Для Каждого _Элемент Из ЭлементыПараметров Цикл
						Если ЭлементыПараметровВыбора.Найти(_Элемент) = Неопределено Тогда
							ЭлементыПараметровВыбора.Добавить(_Элемент);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;					
			КонецЦикла;
		КонецЦикла;
		ИзмененныеРеквизиты = Неопределено;
		ЗависимыеГруппы.СортироватьПоЗначению();
		Для Каждого _Элемент Из ЭлементыПараметровВыбора Цикл
			РаботаСФормойКлиентСервер.УстановитьПараметрыВыбора(Форма, Модель, Форма.Элементы[_Элемент]);
		КонецЦикла;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	//  Настройка элементов
	Для Каждого ЭлементСписка Из ЗависимыеЭлементы Цикл
		_Элемент = ЭлементСписка.Представление;
		Если ОбработанныеЭлементы[_Элемент] = Ложь Тогда
			Продолжить;
		Иначе
			ОбработанныеЭлементы[_Элемент] = Ложь;
		КонецЕсли;
		Элемент = Модель.Элементы[_Элемент];
		#Если Клиент Тогда
			Если Элемент.НаСервере Тогда
				Возврат Ложь;
			КонецЕсли;
		#КонецЕсли
		Свойства = Новый Структура;
		Параметры = Новый Структура;
		Для Каждого _Параметр Из Элемент.Параметры Цикл
			Параметры.Вставить(_Параметр, РаботаСМодельюКлиентСервер.ЗначениеПараметра(Форма, Модель, Модель.Параметры[_Параметр]));
		КонецЦикла; 
		Попытка
			ФункцияСостояния = Элемент.ФункцияСостояния; 
			Если ФункцияСостояния = "*" Тогда
				ФункцияСостояния = Модель.Модуль+".Свойства"+_Элемент+"(Свойства, Параметры)";
			КонецЕсли;
			Если Вычислить(ФункцияСостояния) = Ложь Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			СообщениеОбОшибке = СтрШаблон("Ошибка при определении свойств элемента %1: %2", _Элемент, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Продолжить;
		КонецПопытки;
		НастроитьЭлемент(Форма, ЭлементыФормы, _Элемент, Свойства);
		Если _Элемент <> "ЭтаФорма" Тогда
			ЭлементФормы = ЭлементыФормы[_Элемент];
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
				УстановитьПараметрыВыбора(Форма, Модель, ЭлементФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//  Настройка групп
	Для Каждого ЭлементСписка Из ЗависимыеГруппы Цикл
		_Группа = ЭлементСписка.Представление;
		Если ОбработанныеГруппы[_Группа] = Ложь Тогда
			Продолжить;
		Иначе
			ОбработанныеГруппы[_Группа] = Ложь;
		КонецЕсли;
		Группа = Модель.Группы[_Группа];
		#Если Клиент Тогда
			Если Группа.НаСервере Тогда
				Возврат Ложь;
			КонецЕсли;
		#КонецЕсли
		Свойства = Новый Структура;
		Параметры = Новый Структура;
		Для Каждого _Параметр Из Элемент.Параметры Цикл
			Параметры.Вставить(_Параметр, РаботаСМодельюКлиентСервер.ЗначениеПараметра(Форма, Модель, Модель.Параметры[_Параметр]));
		КонецЦикла; 
		ФункцияСостояния = Группа.ФункцияСостояния; 
		Если ФункцияСостояния = "*" Тогда
			ФункцияСостояния = Модель.Модуль+".СвойстваГруппы"+_Группа+"(Свойства, Параметры)";
		КонецЕсли;
		Если Вычислить(ФункцияСостояния) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого _Элемент Из Группа.Элементы Цикл
			НастроитьЭлемент(Форма, ЭлементыФормы, _Элемент, Свойства);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура НачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Отказ = Ложь;
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(Форма);
	ПроверитьЗаполнениеПараметровВыбора(Форма, Модель, Элемент, Отказ);
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПриАктивизацииСтроки(Форма, Элемент) Экспорт
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(Форма);
	ПараметрКоллекции = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если ПараметрКоллекции = Неопределено Тогда
		Возврат;
	Иначе
		Коллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, ПараметрКоллекции));
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ИндексСтроки = Неопределено;
		Иначе
			ИндексСтроки = Коллекция.Индекс(Коллекция.НайтиПоИдентификатору(Элемент.ТекущаяСтрока));
		КонецЕсли; 
		РаботаСМодельюКлиентСервер.УстановитьЗначение(Форма, ПараметрКоллекции.Идентификатор + ".ИндексСтроки",, ИндексСтроки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
