///////////////////////////////////////////////////////////////////////////////////////////////////////
//  Подсистема "Управление состоянием"
//	Автор: Калякин Андрей Г.
//  Описание размещено на ресурсе: https://infostart.ru/public/1202858/
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Определение

// Возвращает структуру с описанием модели объекта
//
// Параметры:
//  Модуль - Строка - Имя общего модуля модели с фунциями состояния, значения и обработчиками событий ПриИзменении. 
//  					Модуль должен быть доступен в контексте клиента и сервера, при этом части 
//  					доступные только с сервера должны быть заключены в директиве #Если Сервер Тогда #КонецЕсли
//  ПутьКДанным - Строка - Путь к данным объекта модели. Если объект в контексте формы, то равен пути основного объекта и обычно это "Объект"
//
// Возвращаемое значение:
//  Структура - 
//  * ПутьКДанным - Строка - См. входящий параметр
//  * Модуль - Строка - См. входящий параметр
//
//  * Параметры - Соответствие - 
//  ** Ключ - Строк - Идентификатор параметра
//  ** Значение - Структура - См. Параметр 
//  * Связи - Соответствие - 
//  ** Ключ - Строка - Идентификатор связи
//  ** Значение - Структура - См. Связь
//  
//  * Элементы - Соответствие - элементы формы 
//  ** Ключ - Строка - Имя элемента формы
//  ** Значение - Структура - См. РаботаСФормойКлиентСервер.Элемент
//  * Группы - Соответствие - Группы элементов, объединенных общей настройкой
//  ** Ключ - Строка - Имя группы
//  ** Значение - Структура - См. РаботаСФормойКлиентСервер.Группа
//  
//  * ЗависимыеСвязи - Соответствие - 
//  ** Ключ - Строка - Идентификатор параметра, от которого зависят свойства связей
//  ** Значение - Массив - Идентификаторы связей, свойства которых параметризованы
//  * ЗависимыеПараметры - Соответствие - массив параметров, свойства которых зависят от данного
//  ** Ключ - Строка - Идентификатор параметра, от которого зависят свойства других параметров
//  ** Значение - Массив -  Идентификаторы параметров, свойства которых параметризованы
//  * ЗависимыеЭлементы - Соответствие - 
//  ** Ключ - Строка - Идентификатор параметра
//  ** Значение - Массив - Элементы формы, свойства которых зависят от параметра
//  * ЗависимыеГруппы - Соответствие - 
//  ** Ключ - Строка - Идентификатор параметра
//  ** Значение - Массив - Идентификаторы групп, которые зависят от параметра
//  
//  * ПараметрыЭлементов - Соответствие - 
//  ** Ключ - Строка - Имя элемента формы
//  ** Значение - Массив - Идентификаторы параметров, от которых зависят свойства элемента
//
Функция Модель(Модуль, ПутьКДанным = "") Экспорт
	Модель = Новый Структура;
	//  Общее
	Модель.Вставить("ПутьКДанным", ПутьКДанным);
	Модель.Вставить("Модуль", Модуль);
	//  Данные объекта
	Модель.Вставить("Параметры", Новый Соответствие);
	Модель.Вставить("Связи", Новый Соответствие);
	//  Данные формы
	Модель.Вставить("Элементы", Новый Соответствие);// [ЭлементФормы] = {Имя, Параметры, НаСервере}
	Модель.Вставить("Группы", Новый Соответствие);// [Группа] = {ИмяГруппы, Элементы, ЗависитОтГрупп}
	//  Зависимости от параметров
	Модель.Вставить("ЗависимыеСвязи", Новый Соответствие);// [Параметр]    -> Массив(Связи)
	Модель.Вставить("ЗависимыеПараметры", Новый Соответствие);// [Параметр] -> Массив(Параметры)
	Модель.Вставить("ЗависимыеЭлементы", Новый Соответствие);        // [Параметр]    -> Массив(Элементы)
	Модель.Вставить("ЗависимыеГруппы", Новый Соответствие);        // [Параметр]    -> Массив(Группы)
	//  Соответствие
	Модель.Вставить("ПараметрыЭлементов", Новый Соответствие);       // [ИмяЭлемента] *-> Параметр
	Модель.Вставить("ЭлементыПараметров", Новый Соответствие);       // [Параметр] ->* Массив Элементов
	Возврат Модель;
КонецФункции

// Параметры:
//  Контекст - Любой объект
//  Модель - Структура -
//  Идентификатор - Строка - имя реквизита или переменной контекста (не включает имя объекта!)
//  ПутьКДанным - Строка - Для не заданного значения вычисляется системой (не включает имя объекта!)
//  ОбработчикПриИзменении - Строка - "*" - обработчик по умолчанию или заданная сигнатура обработчика
//  Выражение - Строка - формаула расчета значения может выглядеть как выражение с параметрами или "*" - вызов функции по умолчанию или заданная сигнатура функции значения
//  ПроверкаЗаполнения - Булево
//  НаСервере - Булево - контекст вычисления параметра
//  
// Возвращаемое значение:
//  Структура
//
Функция Параметр(Контекст, Модель, Идентификатор, Знач ПутьКДанным = "", ОбработчикПриИзменении = "", Выражение = "", Знач ПроверкаЗаполнения = Неопределено, Знач НаСервере = Неопределено) Экспорт
	Перем Объект;
	ЭтоКоллекция = Ложь;
	ЭтоЭлементКоллекции = Ложь;
	Коллекция = "";
	СохраняемыеДанные = Ложь;
	СтруктураПараметра = Модель.Параметры[Идентификатор];
	Если СтруктураПараметра <> Неопределено Тогда
		Возврат СтруктураПараметра;
	КонецЕсли;
	Если ЗначениеЗаполнено(Модель.ПутьКДанным) Тогда
		Объект = Вычислить("Контекст." + Модель.ПутьКДанным);
	Иначе
		Объект = Контекст;
	КонецЕсли;
	ЭтоСсылка = Истина;
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		СоставПути = СтрРазделить(ПутьКДанным, ".");
		Если СоставПути.ВГраница() = 1 Тогда
			СтруктураБазовогоПараметра = Параметр(Контекст, Модель, СоставПути[0]);
			Коллекция = СтруктураБазовогоПараметра.Идентификатор;
			ЭтоЭлементКоллекции = СоставПути[1] <> "ИндексСтроки";
			СохраняемыеДанные = СтруктураБазовогоПараметра.СохраняемыеДанные;
			//Параметр(Контекст, Модель, Коллекция + ".ИндексСтроки");
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ПутьКДанным) Тогда
				СохраняемыеДанные = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		СоставПути = СтрРазделить(Идентификатор, ".");
		Если СоставПути.ВГраница() = 1 Тогда
			СтруктураБазовогоПараметра = Параметр(Контекст, Модель, СоставПути[0]);
			Если СтруктураБазовогоПараметра.ЭтоКоллекция И СоставПути[1] <> "ИндексСтроки" Тогда
				Коллекция = СтруктураБазовогоПараметра.Идентификатор;
				ЭтоЭлементКоллекции = Истина;
				ПутьКДанным = Идентификатор;
				СохраняемыеДанные = СтруктураБазовогоПараметра.СохраняемыеДанные;
				//Параметр(Контекст, Модель, Коллекция + ".ИндексСтроки");
			КонецЕсли;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, Идентификатор) Тогда
				ПутьКДанным = Идентификатор;
				СохраняемыеДанные = Истина;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, Идентификатор) Тогда
				ПутьКДанным = Идентификатор;
				СохраняемыеДанные = Ложь;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутьКДанным) И НЕ СтрНайти(ПутьКДанным, ".") Тогда
		ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(?(СохраняемыеДанные, Объект, Контекст), ПутьКДанным);
		Если ТипЗнч(ЗначениеПараметра) = Тип("ДанныеФормыКоллекция")
			ИЛИ ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений")
			ИЛИ ТипЗнч(Контекст) <> Тип("ФормаКлиентскогоПриложения") 
				И Объект.Метаданные().ТабличныеЧасти.Найти(ПутьКДанным) <> Неопределено Тогда
			ЭтоКоллекция = Истина;
			//Параметр(Контекст, Модель, Идентификатор + ".ИндексСтроки");
		КонецЕсли;
		ТипЗначения = ТипЗнч(ЗначениеПараметра);
		Если ТипЗначения = Тип("Дата") ИЛИ ТипЗначения = Тип("Число") ИЛИ ТипЗначения = Тип("Строка") ИЛИ ТипЗначения = Тип("Булево") Тогда
			ЭтоСсылка = Ложь;
		КонецЕсли;
	Иначе
		ЭтоСсылка = Ложь;
	КонецЕсли;
	Если ЭтоКоллекция Тогда
		ЭтоСсылка = Ложь;
	КонецЕсли;
	Если НаСервере = Неопределено Тогда
		Если ЭтоСсылка Тогда
			НаСервере = Истина;
		Иначе
			НаСервере = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПроверкаЗаполнения = Неопределено Тогда
		ПроверкаЗаполнения = ЭтоСсылка;
	КонецЕсли;
	Параметр = Новый Структура;
	Параметр.Вставить("Идентификатор", Идентификатор);
	Параметр.Вставить("ПутьКДанным", ПутьКДанным);
	Параметр.Вставить("ПриИзменении", ОбработчикПриИзменении);
	Параметр.Вставить("Выражение", Выражение);
	Параметр.Вставить("НаСервере", НаСервере);
	//  Вычисляемые поля
	Параметр.Вставить("ЭтоСсылка", ЭтоСсылка);
	Параметр.Вставить("ЭтоКоллекция", ЭтоКоллекция);
	Параметр.Вставить("ЭтоЭлементКоллекции", ЭтоЭлементКоллекции);
	Параметр.Вставить("Коллекция", Коллекция);
	Параметр.Вставить("Ключ", Неопределено);// определяет ключ для параметра коллекции
	Параметр.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	Параметр.Вставить("Использование", Истина);
	Параметр.Вставить("СохраняемыеДанные", СохраняемыеДанные);
	Параметр.Вставить("Порядок", Неопределено);
	//  Свойства коллекции
	Параметр.Вставить("ОтборСтрок", Неопределено);
	Параметр.Вставить("ИндексСтроки", Неопределено);
	//
	Параметр.Вставить("ВходящиеСвязи", Новый Массив);
	Параметр.Вставить("ИсходящиеСвязи", Новый Массив);
	Параметр.Вставить("ЗависимыеСвязи", Новый Массив);
	//
	Параметр.Вставить("Свойства", Новый Структура);
	Параметр.Вставить("ЗначениеПоУмолчанию", Неопределено);
	Модель.Параметры[Идентификатор] = Параметр;
//	Если ЭтоЭлементКоллекции Тогда
//		Связь(Контекст, Идентификатор, Коллекция, ОбщийКлиентСервер.ОкончаниеСтрокиПослеРазделителя(ПутьКДанным, "."))
//	КонецЕсли;
	Возврат Параметр;
КонецФункции

Процедура ЗаполнитьСвойстваСвязи(Модель, Связь, Свойства) Экспорт
	Для Каждого ЭлементСвойства Из Свойства Цикл
		Связь.Свойства.Вставить(ЭлементСвойства.Ключ, ЭлементСвойства.Значение);
		ЗависимыеСвязи = Модель.ЗависимыеСвязи[ЭлементСвойства.Значение];
		Если ЗависимыеСвязи = Неопределено Тогда
			ЗависимыеСвязи = Новый Массив;
			Модель.ЗависимыеСвязи[ЭлементСвойства.Значение] = ЗависимыеСвязи;
		КонецЕсли;
		ЗависимыеСвязи.Добавить(Связь.Идентификатор);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСвойстваПараметра(Модель, Параметр, Свойства) Экспорт
	Для Каждого ЭлементСвойства Из Свойства Цикл
		Параметр.Свойства.Вставить(ЭлементСвойства.Ключ, ЭлементСвойства.Значение);
		ЗависимыеПараметры = Модель.ЗависимыеПараметры[ЭлементСвойства.Значение];
		Если ЗависимыеПараметры = Неопределено Тогда
			ЗависимыеПараметры = Новый Массив;
			Модель.ЗависимыеПараметры[ЭлементСвойства.Значение] = ЗависимыеПараметры;
		КонецЕсли;
		ЗависимыеПараметры.Добавить(Параметр.Идентификатор);
	КонецЦикла;
КонецПроцедуры

//  ВидСвязи - Число - 0- топологическая, 1- сильная, 2- слабая, 3- ПараметрыСвойств
Функция Связь(Контекст, Модель, Приемник, Источник = "", Знач ПутьКДанным = "*", Значение = NULL, ПараметрыСвойств = Неопределено, Слабая = Ложь) Экспорт
	Если ПутьКДанным = "*" И Источник <> "" Тогда
		ПутьКДанным = ОбщийКлиентСервер.ОкончаниеСтрокиПослеРазделителя(Источник);
	КонецЕсли;
	Идентификатор = СтрШаблон("%1-%2", Приемник, ?(ЗначениеЗаполнено(Источник), Источник, ПутьКДанным));
	//  Моделирование связей по свойствам источника
	СоставИсточника = СтрРазделить(Источник, ".");
	Если СоставИсточника.ВГраница() = 1 И Модель.Параметры[Источник] = Неопределено Тогда
		//  Входящий параметр является составным
		БазовыйПараметр = Параметр(Контекст, Модель, СоставИсточника[0]);
		Если НЕ БазовыйПараметр.ЭтоКоллекция Тогда
			//  Это реквизит параметра ссылочного типа
			//  Добавление доп.связей: БазовыйПараметр.*<-БазовыйПараметр, Источник<-БазовыйПараметр.*
			ПараметрРеквизитов = Параметр(Контекст, Модель, БазовыйПараметр.Идентификатор + ".*");
			ПараметрРеквизитов.Выражение = СтрШаблон("РаботаСМоделью.ЗначенияРеквизитов(Модель, ""%1"", ""*"")", БазовыйПараметр.Идентификатор);
			ПараметрРеквизитов.НаСервере = Истина;
			ВходящийПараметр = Параметр(Контекст, Модель, Источник);
			ВходящийПараметр.Выражение = СтрШаблон("РаботаСМоделью.ЗначенияРеквизитов(Модель, ""%1"", ""%2"")", ПараметрРеквизитов.Идентификатор, СоставИсточника[1]);
			ВходящийПараметр.НаСервере = Ложь;
			Связь(Контекст, Модель, БазовыйПараметр.Идентификатор + ".*", БазовыйПараметр.Идентификатор, "Ссылка");// БазовыйПараметр.*<-БазовыйПараметр
			Возврат Связь(Контекст, Модель, Приемник, БазовыйПараметр.Идентификатор + ".*", СоставИсточника[1]);// Источник<-БазовыйПараметр.*
		КонецЕсли;					
	КонецЕсли;
	//  Формирование структуры связи
	Связь = Новый Структура;
	Связь.Вставить("Приемник", Приемник);
	Связь.Вставить("Источник", Источник);
	Связь.Вставить("ПутьКДанным", ПутьКДанным);
	Связь.Вставить("Значение", Значение);
	Связь.Вставить("Слабая", Слабая);
	Связь.Вставить("Идентификатор", Идентификатор);
	Связь.Вставить("Использование", Истина);
	Связь.Вставить("Свойства", Новый Структура);
	Если ПараметрыСвойств <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из ПараметрыСвойств Цикл
			Связь.Свойства.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			ЗависимыеСвязи = Модель.ЗависимыеСвязи[ЭлементСтруктуры.Значение];
			Если ЗависимыеСвязи = Неопределено Тогда
				ЗависимыеСвязи = Новый Массив;
				Модель.ЗависимыеСвязи[ЭлементСтруктуры.Значение] = ЗависимыеСвязи;
			КонецЕсли;
			ЗависимыеСвязи.Добавить(Идентификатор);
		КонецЦикла;
	КонецЕсли;
	//  Добавление к модели
	Модель.Связи[Идентификатор] = Связь;
	//  Добавление ссылки в параметры
	Параметр(Контекст, Модель, Приемник).ВходящиеСвязи.Добавить(Идентификатор);
	Если ЗначениеЗаполнено(Источник) Тогда
		Параметр(Контекст, Модель, Источник).ИсходящиеСвязи.Добавить(Идентификатор);
	КонецЕсли;
	Возврат Связь;
КонецФункции

Функция Реквизит(_Параметр, ИндексСтроки = Неопределено, ПроверкаЗаполнения = Истина) Экспорт
	Возврат Новый Структура("Идентификатор, Параметр, ИндексСтроки, ПроверкаЗаполнения", ИдентификаторРеквизита(_Параметр, ИндексСтроки), _Параметр, ИндексСтроки, ПроверкаЗаполнения);
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ОпределитьПорядокПараметра(Модель, _Параметр, Порядок, НайденныеПараметры)
	МассивСвязей = Модель.Параметры[_Параметр].ИсходящиеСвязи;
	ЗависимыеСвязи = Модель.ЗависимыеСвязи[_Параметр];
	Если ЗависимыеСвязи <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязей, ЗависимыеСвязи, Истина);
	КонецЕсли;
	Для Каждого _Связь Из МассивСвязей Цикл
		_ЗависимыйПараметр = Модель.Связи[_Связь].Приемник;
		Если (НайденныеПараметры[_ЗависимыйПараметр] = Неопределено) Тогда
			ОпределитьПорядокПараметра(Модель, _ЗависимыйПараметр, Порядок, НайденныеПараметры);
		КонецЕсли;
	КонецЦикла;
	ЗависимыеПараметры = Модель.ЗависимыеПараметры[_Параметр];
	Если ЗависимыеПараметры <> Неопределено Тогда
		Для Каждого _ЗависимыйПараметр Из ЗависимыеПараметры Цикл
			Если (НайденныеПараметры[_ЗависимыйПараметр] = Неопределено) Тогда
				ОпределитьПорядокПараметра(Модель, _ЗависимыйПараметр, Порядок, НайденныеПараметры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Порядок = Порядок + 1;
	Модель.Параметры[_Параметр].Порядок = Порядок;
	НайденныеПараметры[_Параметр] = Истина;
КонецПроцедуры

//  Топологическая сортировка
Процедура ОпределитьПорядок(Модель) Экспорт
	Порядок = 0;
	НайденныеПараметры = Новый Соответствие;
	Для Каждого ЭлементПараметра Из Модель.Параметры Цикл
		Если НайденныеПараметры[ЭлементПараметра.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОпределитьПорядокПараметра(Модель, ЭлементПараметра.Ключ, Порядок, НайденныеПараметры);
	КонецЦикла;
КонецПроцедуры

Функция ИдентификаторРеквизита(_Параметр, ИндексСтроки = Неопределено) Экспорт
	Если ИндексСтроки = Неопределено Тогда
		Возврат _Параметр;
	Иначе
		Состав = СтрРазделить(_Параметр, ".");
		Возврат СтрШаблон("%1[%2].%3", Состав[0], Формат(ИндексСтроки, "ЧН=0; ЧГ=;"), Состав[1]);
	КонецЕсли;
КонецФункции

Функция СвязьРеквизитов(РеквизитПриемник, РеквизитИсточник) Экспорт
	Возврат Новый Структура("Идентификатор, РеквизитПриемник, РеквизитИсточник", СтрШаблон("%1-%2", РеквизитПриемник.Идентификатор, РеквизитИсточник.Идентификатор), РеквизитПриемник.Идентификатор, РеквизитИсточник.Идентификатор);
КонецФункции

Функция СвойствоПараметра(Контекст, Модель, Параметр, ИндексСтроки = Неопределено, Свойство) Экспорт
	Перем _ПараметрСвойства;
	Если Параметр.Свойства.Свойство(Свойство, _ПараметрСвойства) Тогда
		Результат = ЗначениеПараметра(Контекст, Модель, Модель.Параметры[_ПараметрСвойства], ИндексСтроки);
	Иначе
		Результат = Параметр[Свойство];
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция СвойствоСвязи(Контекст, Модель, Связь, ИндексСтроки = Неопределено, Свойство) Экспорт
	Перем _ПараметрСвойства;
	Если Связь.Свойства.Свойство(Свойство, _ПараметрСвойства) Тогда
		Результат = ЗначениеПараметра(Контекст, Модель, Модель.Параметры[_ПараметрСвойства], ИндексСтроки);
	Иначе
		Результат = Связь[Свойство];
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция МодельОбъекта(Контекст) Экспорт
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда	//@skip-warning
		Возврат Контекст["ХранилищеЗначений"][1].Значение;
	Иначе
		Возврат Контекст.ДополнительныеСвойства["ХранилищеЗначений"][1].Значение;
	КонецЕсли;
КонецФункции


// Описание
// 
// Параметры:
// 	Контекст
// 	Модель - Структура - Описание
// 	Параметр
// 	ИндексСтроки - Число, Неопределено - Описание
// 	ИмяРеквизита - Строка - Описание
// Возвращаемое значение:
// 	
Функция ОбъектПараметра(Контекст, Модель, Параметр, ИндексСтроки = Неопределено, ИмяРеквизита = "") Экспорт
	Если ЗначениеЗаполнено(Параметр.ПутьКДанным) Тогда
		Если Параметр.ЭтоЭлементКоллекции Тогда
			Возврат ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, Параметр), ИмяРеквизита)[ИндексСтроки];
		Иначе
			Возврат ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, Параметр), ИмяРеквизита);
		КонецЕсли;
	Иначе//  Это виртуальный параметр
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			Объект = Контекст;
		Иначе
			Объект = Контекст.ДополнительныеСвойства;
		КонецЕсли;
		Если Параметр.ЭтоЭлементКоллекции Тогда
			//TODO: КА_ Вычислить объект виртуального параметра коллекции
		Иначе //@skip-warning
			ХранилищеЗначений = Объект["ХранилищеЗначений"];
			Словарь = ХранилищеЗначений[0].Значение;
			ИндексСтрокиХранилища = Словарь[Параметр.Идентификатор];
			Если ИндексСтрокиХранилища = Неопределено Тогда
				НоваяСтрока = ХранилищеЗначений.Добавить();
				ИндексСтрокиХранилища = ХранилищеЗначений.Индекс(НоваяСтрока);
				Словарь[Параметр.Идентификатор] = ИндексСтрокиХранилища;
			КонецЕсли;
			ИмяРеквизита = "Значение";
			Возврат ХранилищеЗначений[ИндексСтрокиХранилища];
		КонецЕсли;	
	КонецЕсли;
КонецФункции

Функция ЗначениеПараметра(Контекст, Модель, Параметр, ИндексСтроки = Неопределено) Экспорт
	Перем ИмяРеквизита;// данная переменная определяется в функции ПолучитьРеквизитФормыПоПути
	Возврат ОбъектПараметра(Контекст, Модель, Параметр, ИндексСтроки, ИмяРеквизита)[ИмяРеквизита];
КонецФункции

Функция УстановитьЗначение(Контекст, _Параметр, ИндексСтроки = Неопределено, Значение, ИзмененныеРеквизиты = Неопределено, Модель = Неопределено, ПроверкаЗаполнения = Истина) Экспорт
	Перем ИмяРеквизита;
	Если ТипЗнч(ИзмененныеРеквизиты) <> Тип("Массив") Тогда
		ИзмененныеРеквизиты = Новый Массив;
	КонецЕсли;
	Если Модель = Неопределено Тогда
		Модель = МодельОбъекта(Контекст);
	КонецЕсли;
	Параметр = Модель.Параметры[_Параметр];
	Если ОбщийКлиентСервер.УстановитьЗначение(ОбъектПараметра(Контекст, Модель, Параметр, ИндексСтроки, ИмяРеквизита)[ИмяРеквизита], Значение) Тогда
		ИзмененныеРеквизиты.Добавить(Реквизит(_Параметр, ИндексСтроки, ПроверкаЗаполнения));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ЗаполнитьЗначенияПараметров(Контекст, _Параметры, ИндексСтроки = Неопределено, Значения, ИзмененныеРеквизиты = Неопределено) Экспорт
	Модель = МодельОбъекта(Контекст);
	ЕстьИзменения = Ложь;
	Для Каждого _Параметр Из ОбщийКлиентСервер.Массив(_Параметры) Цикл
		Если УстановитьЗначение(Контекст, _Параметр, ИндексСтроки, Значения[_Параметр], ИзмененныеРеквизиты, Модель) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьИзменения;
КонецФункции

Функция ВыполнитьВыражениеЗначения(Выражение, Контекст, Объект, Модель, Параметры, СтандартнаяОбработка, Отказ)
	Попытка
		Возврат Вычислить(Выражение);// Формат вызова: ЗначениеПараметраХХХХХХХХ(ВходящиеПараметры, СтандартнаяОбработка)
	Исключение
		СообщениеОбОшибке = СтрШаблон("Ошибка при вычислении %1: %2", Выражение, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,,,, Отказ);
	КонецПопытки;
КонецФункции

// Назначение функции в том, чтобы присвоить вычисленное значение реквизиту через ссылку, 
// т.к. иного способа присвоения нет или придется несколько раз обращаться к значению реквизита: для чтения и для записи
//
// Параметры:
//  Контекст - Любой объект - может использоваться при вычислении значения
//  Модель - Структура - может использоваться для выражения значения параметра или в обработчике ПриИзменении
//  СсылкаНаЗначение - Ссылка - 
//  Параметр - Структура - 
//  ВходящиеПараметры - Структура - параметры отбора
//  ДанныеСтроки - Структура - контекст текущей строки для элемента таблицы
//
Функция ОпределитьЗначение(Контекст, Объект, Модель, СсылкаНаЗначение, Параметр, ИндексСтроки = Неопределено, ВходящиеПараметры, ДанныеСтроки = Неопределено) Экспорт
	ЕстьИзменение = Ложь;
	Значение = Неопределено;
	Выражение = Параметр.Выражение;
	Если ЗначениеЗаполнено(Выражение) Тогда
		Если Выражение = "*" Тогда
			Выражение = СтрШаблон("%1.Значение%2(Контекст, Объект, Модель, Параметры, СтандартнаяОбработка, Отказ)", Модель.Модуль, Параметр.Идентификатор);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Отказ = Ложь;
		Значение = ВыполнитьВыражениеЗначения(Выражение, Контекст, Объект, Модель, ВходящиеПараметры, СтандартнаяОбработка, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	Если СтандартнаяОбработка Тогда
		Если Параметр.ЭтоСсылка Тогда
			#Если Сервер Тогда
				Значение = РаботаСМоделью.НайтиЗначение(ТипЗнч(СсылкаНаЗначение), ВходящиеПараметры, СсылкаНаЗначение, СвойствоПараметра(Контекст, Модель, Параметр, ИндексСтроки, "ПроверкаЗаполнения"));
				ЕстьИзменение = ОбщийКлиентСервер.УстановитьЗначение(СсылкаНаЗначение, Значение);
			#Иначе
				ВызватьИсключение СтрШаблон("Для определения значение параметра ""%1"" необходим контекст сервера!", Параметр.Идентификатор);
			#КонецЕсли
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ЕстьИзменение = ОбщийКлиентСервер.УстановитьЗначение(СсылкаНаЗначение, Значение);
	КонецЕсли;
	Возврат ЕстьИзменение;
КонецФункции

// Рассчитывает не сохраняемые параметры
// 
// Параметры:
// 	Контекст - ЛюбойОБъект
Процедура РассчитатьПроизводныеПараметры(Контекст) Экспорт
	Перем ИмяРеквизита;
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(Контекст);
	Если ЗначениеЗаполнено(Модель.ПутьКДанным) Тогда
		Объект = Контекст[Модель.ПутьКДанным];
	Иначе
		Объект = Контекст;
	КонецЕсли;
	Список = Новый СписокЗначений;
	Для Каждого ЭлементПараметра Из Модель.Параметры Цикл
		Параметр = ЭлементПараметра.Значение;
		Если НЕ Параметр.СохраняемыеДанные Тогда
			Список.Добавить(Параметр.Порядок, Параметр.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	Список.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Для Каждого ЭлементСписка Из Список Цикл
		Параметр = Модель.Параметры[ЭлементСписка.Представление];
		//  Это реквизит объекта или контекста
		Если Параметр.ЭтоЭлементКоллекции Тогда
			//  TODO: КА_ Добавить расчет производных параметров коллекции
		Иначе
			Отказ = Ложь;
			ВходящиеПараметры = РаботаСМодельюКлиентСервер.ПараметрыСвязей(Контекст, Модель, Параметр,,, Отказ);
			Если Отказ Тогда
				РаботаСМодельюКлиентСервер.ОбъектПараметра(Контекст, Модель, Параметр,, ИмяРеквизита)[ИмяРеквизита] = Параметр.ЗначениеПоУмолчанию;
				Продолжить;
			КонецЕсли;
			РаботаСМодельюКлиентСервер.ОпределитьЗначение(Контекст, Объект, Модель, 
				РаботаСМодельюКлиентСервер.ОбъектПараметра(Контекст, Модель, Параметр,, ИмяРеквизита)[ИмяРеквизита], 
				Параметр,, ВходящиеПараметры
			);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирует структуру параметров выбора
//  
// Параметры:
//  Контекст - Любой объект
//  Модель - Структура
//  Параметр - Структура
//  ИндексСтроки - Число, Неопределено -
//  Отказ - Булево - Если не удалось определить значения всех парамтеров связей    
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыСвязей(Контекст, Модель, Параметр, ИндексСтроки = Неопределено, ПропускатьСлабыеСвязи = Ложь, Отказ = Ложь) Экспорт
	Параметры = Новый Структура;
	Для Каждого _Связь Из Параметр.ВходящиеСвязи Цикл
		Связь = Модель.Связи[_Связь];
		Если НЕ ЗначениеЗаполнено(Связь.ПутьКДанным) ИЛИ ПропускатьСлабыеСвязи И Связь.Слабая Тогда
			Продолжить;
		КонецЕсли;
		// Получение значения параметра связи
		ПараметрИсточника = Модель.Параметры[Связь.Источник];
		Значение = ЗначениеПараметра(Контекст, Модель, ПараметрИсточника, ИндексСтроки);
		Если НЕ СвойствоСвязи(Контекст, Модель, Связь, ИндексСтроки, "Использование")
			ИЛИ НЕ СвойствоПараметра(Контекст, Модель, ПараметрИсточника, ИндексСтроки, "Использование") Тогда
			Продолжить;
		ИначеЕсли (СвойствоПараметра(Контекст, Модель, ПараметрИсточника, ИндексСтроки, "ПроверкаЗаполнения")
				И НЕ ЗначениеЗаполнено(Значение)) Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		// Добавление параметра в структуру
		СоставПути = СтрРазделить(Связь.ПутьКДанным, ".");
		Если СоставПути.ВГраница() = 1 Тогда
			ВложеннаяСтруктура = Неопределено;
			Если НЕ Параметры.Свойство(СоставПути[0], ВложеннаяСтруктура) Тогда
				ВложеннаяСтруктура = Новый Структура;
				Параметры.Вставить(СоставПути[0], ВложеннаяСтруктура);
			КонецЕсли;
			ВложеннаяСтруктура.Вставить(СоставПути[1], Значение);
		Иначе
			Параметры.Вставить(Связь.ПутьКДанным, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Параметры;
КонецФункции

Функция ПутьКДанным(Модель, Параметр) Экспорт
	Если Параметр.СохраняемыеДанные Тогда
		Возврат ?(Модель.ПутьКДанным = "", "", Модель.ПутьКДанным + ".") + Параметр.ПутьКДанным;
	Иначе
		Возврат Параметр.ПутьКДанным;
	КонецЕсли;
КонецФункции

//  Аналог ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути, отличие в том, что здесь выделяется
// исходящая переменная ИмяРеквизита. Это необходимо для получения ссылки на значение.
//
Функция ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным, ИмяРеквизита = "") Экспорт
	ПутьКДаннымОбъекта = Лев(ПутьКДанным, СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца)-1);
	Если ЗначениеЗаполнено(ПутьКДаннымОбъекта) Тогда
		ИмяРеквизита = ОбщийКлиентСервер.ОкончаниеСтрокиПослеРазделителя(ПутьКДанным);
		Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДаннымОбъекта);
	Иначе
		ИмяРеквизита = ПутьКДанным;
		Возврат Контекст;
	КонецЕсли;
КонецФункции

Процедура ДобавитьЗависимыйРеквизит(Модель, Последовательность, ИспользованныеСвязи, ЗависимыйРеквизит, ВедущийРеквизит) Экспорт
	СвязьРеквизитов = СвязьРеквизитов(ЗависимыйРеквизит, ВедущийРеквизит);
	Если НЕ ИспользованныеСвязи[СвязьРеквизитов.Идентификатор] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Реквизит = Последовательность.Словарь[ЗависимыйРеквизит.Идентификатор];
	Если Реквизит = Неопределено Тогда
		Последовательность.Список.Добавить(Модель.Параметры[ЗависимыйРеквизит.Параметр].Порядок, ЗависимыйРеквизит.Идентификатор);
		Последовательность.Словарь[ЗависимыйРеквизит.Идентификатор] = ЗависимыйРеквизит;
		Реквизит = ЗависимыйРеквизит;
	КонецЕсли;
	ИспользованныеСвязи[СвязьРеквизитов.Идентификатор] = СвязьРеквизитов;
КонецПроцедуры

// Параметры:
//  Контекст - Любой объект - объект с моделью и данными
//  Модель - Структура - описание модели объекта
//  ВедущийРеквизит - Структура - реквизит, от которого нужно рассчитать зависимости:
//   * Идентификатор - Строка(36) -
//   * ИндексСтроки - Число - 
//  Последовательность - Структура - стек рассчитанных зависимостей:
//   * Список - СписокЗначений - {Идентификатор, Порядок} - нужен для сортировки по порядку
//   * Словарь - Соответствие - {Идентификатор -> Структура} - нужен для поиска уже добавленных реквизитов. 
//                           Поиск в списке невозможен, т.к. тогда придется хранить структуру в списке 
//  ИспользованныеСвязи - Соответствие - это словарь пройденных связей
//   {Идентификатор -> Структура{Идентификатор, РеквизитПриемник, РеквизитИсточник}}
//
Функция ДобавитьЗависимыеРеквизиты(Контекст, Модель, ВедущийРеквизит, Последовательность, ИспользованныеСвязи)
	Параметр = Модель.Параметры[ВедущийРеквизит.Параметр];
	МассивСвязей = Параметр.ИсходящиеСвязи;
	ЗависимыеСвязи = Модель.ЗависимыеСвязи[Параметр.Идентификатор];
	Если ЗависимыеСвязи <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязей, ЗависимыеСвязи, Истина);
	КонецЕсли;
	Для Каждого _Связь Из МассивСвязей Цикл
		Связь = Модель.Связи[_Связь];
		Если Связь.ПутьКДанным = "" Тогда
			Продолжить;//  это топологическая связь, которая необходима для топологического порядка расчета или связь, определяющая свойства
		КонецЕсли;
		ЗависимыйПараметр = Модель.Параметры[Связь.Приемник];
		Если НЕ ЗависимыйПараметр.ЭтоЭлементКоллекции 
			ИЛИ ЗависимыйПараметр.Коллекция = Параметр.Коллекция Тогда
			ЗависимыйРеквизит = Реквизит(Связь.Приемник, ВедущийРеквизит.ИндексСтроки);
			Если СвойствоСвязи(Контекст, Модель, Связь, ЗависимыйРеквизит.ИндексСтроки, "Использование")
				И СвойствоПараметра(Контекст, Модель, Модель.Параметры[ЗависимыйРеквизит.Параметр], ЗависимыйРеквизит.ИндексСтроки, "Использование") Тогда
				ДобавитьЗависимыйРеквизит(Модель, Последовательность, ИспользованныеСвязи, ЗависимыйРеквизит, ВедущийРеквизит);
			КонецЕсли; 
		Иначе // Это подчиненная коллекция
			ПараметрКоллекции = Модель.Параметры[ЗависимыйПараметр.Коллекция];
			Коллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, ПараметрКоллекции));
			Для Каждого ЭлементКоллекции Из Коллекция Цикл
				ЗависимыйРеквизит = Реквизит(Связь.Приемник, Коллекция.Индекс(ЭлементКоллекции));
				Если СвойствоСвязи(Контекст, Модель, Связь, ЗависимыйРеквизит.ИндексСтроки, "Использование")
					И СвойствоПараметра(Контекст, Модель, Модель.Параметры[ЗависимыйРеквизит.Параметр], ЗависимыйРеквизит.ИндексСтроки, "Использование") Тогда
					ДобавитьЗависимыйРеквизит(Модель, Последовательность, ИспользованныеСвязи, ЗависимыйРеквизит, ВедущийРеквизит);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ЗависимыеПараметры = Модель.ЗависимыеПараметры[Параметр.Идентификатор];
	Если ЗависимыеПараметры <> Неопределено Тогда
		Для Каждого _ЗависимыйПараметр Из ЗависимыеПараметры Цикл
			ЗависимыйПараметр = Модель.Параметры[_ЗависимыйПараметр];
			Если НЕ ЗависимыйПараметр.ЭтоЭлементКоллекции 
				ИЛИ ЗависимыйПараметр.Коллекция = Параметр.Коллекция Тогда
				ЗависимыйРеквизит = Реквизит(_ЗависимыйПараметр, ВедущийРеквизит.ИндексСтроки);
				Если СвойствоПараметра(Контекст, Модель, Модель.Параметры[ЗависимыйРеквизит.Параметр], ЗависимыйРеквизит.ИндексСтроки, "Использование") Тогда
					ДобавитьЗависимыйРеквизит(Модель, Последовательность, ИспользованныеСвязи, ЗависимыйРеквизит, ВедущийРеквизит);
				КонецЕсли; 
			Иначе // Это подчиненная коллекция
				ПараметрКоллекции = Модель.Параметры[ЗависимыйПараметр.Коллекция];
				Коллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, ПараметрКоллекции));
				Для Каждого ЭлементКоллекции Из Коллекция Цикл
					ЗависимыйРеквизит = Реквизит(_ЗависимыйПараметр, Коллекция.Индекс(ЭлементКоллекции));
					Если СвойствоПараметра(Контекст, Модель, Модель.Параметры[ЗависимыйРеквизит.Параметр], ЗависимыйРеквизит.ИндексСтроки, "Использование") Тогда
						ДобавитьЗависимыйРеквизит(Модель, Последовательность, ИспользованныеСвязи, ЗависимыйРеквизит, ВедущийРеквизит);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Параметр.ИсходящиеСвязи.ВГраница() <> -1;
КонецФункции

Процедура ВыполнитьОбработчикПриИзменении(ОбработчикПриИзменении, Контекст, Объект, ДанныеСтроки, Реквизит, ИзмененныеРеквизиты, РассчитанныеРеквизиты)
	Попытка
		Результат = Вычислить(ОбработчикПриИзменении);//  ПриИзменении(Контекст, Объект, Реквизит{Параметр, ИндексСтроки, Значение}, ДанныеСтроки)
	Исключение
		СообщениеОбОшибке = СтрШаблон("Ошибка в обработчике %1: %2", ОбработчикПриИзменении, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецПопытки;
КонецПроцедуры

//
// Процедура основного цикла расчета зависимостей от измененных реквизитов
//
// Параметры:
//  Контекст - Любой объект - форма или объект метаданных
//  ИзмененныеРеквизиты - Массив - массив реквизитов, от которых необходимо рассчитать зависимости
//  СохраненноеСостояние - Структура - хранит СохраненноеСостояние расчета:
//   * РассчитанныеРеквизиты - Соответствие - коллекция реквизитов с рассчитанными значениями. Измененные переходят в этот список.
//   * ИспользованныеСвязи - Соответствие - связи, использованные при расчете зависимостей
//   * Последовательность - Структура - содержит словарь и список реквизитов последовательности расчета:
//    ** Словарь - Соответствие - используется для получения структуры реквизита последовательности расчета
//    ** Список - СписокЗначений - используется для сортировки по топологическому порядку параметров реквизитов, где значение - порядок, представление - идентификатор реквизита
//
Функция РассчитатьСостояние(Контекст, ИзмененныеРеквизиты, СохраненноеСостояние = Неопределено) Экспорт
	Перем Последовательность, РассчитанныеРеквизиты, ИспользованныеСвязи, ИмяРеквизита;
	//  Инициализация/восстановление состояния расчета
	Если СохраненноеСостояние = Неопределено Тогда
		Последовательность = Новый Структура("Список, Словарь", Новый СписокЗначений, Новый Соответствие);
		РассчитанныеРеквизиты = Новый Соответствие;
		ИспользованныеСвязи = Новый Соответствие;
		СохраненноеСостояние = Новый Структура("Последовательность, РассчитанныеРеквизиты, ИспользованныеСвязи", Последовательность, РассчитанныеРеквизиты, ИспользованныеСвязи);
	Иначе
		Последовательность = СохраненноеСостояние.Последовательность;
		РассчитанныеРеквизиты = СохраненноеСостояние.РассчитанныеРеквизиты;
		ИспользованныеСвязи = СохраненноеСостояние.ИспользованныеСвязи;
	КонецЕсли;
	
	Модель = МодельОбъекта(Контекст);
	//  Иницализация контекста
	Если ЗначениеЗаполнено(Модель.ПутьКДанным) Тогда
		Объект = Контекст[Модель.ПутьКДанным];
	Иначе
		Объект = Контекст;
	КонецЕсли;
	
	Пока Истина Цикл
		//  Обработка списка измененных реквизитов: добавление в последовательность, поиск зависимых реквизитов, добавление в список обработанных
		Для Каждого Реквизит Из ИзмененныеРеквизиты Цикл
			Параметр = Модель.Параметры[Реквизит.Параметр];
			Если Параметр.ЭтоСсылка И СвойствоПараметра(Контекст, Модель, Параметр, Реквизит.ИндексСтроки, "ПроверкаЗаполнения") И НЕ ЗначениеЗаполнено(ЗначениеПараметра(Контекст, Модель, Параметр, Реквизит.ИндексСтроки)) Тогда
				Продолжить;
			КонецЕсли;
			//  Проверка, что измененный реквизит уже есть в последовательсности
			Если Последовательность.Словарь[Реквизит.Идентификатор] = Неопределено Тогда
				Последовательность.Список.Добавить(Модель.Параметры[Реквизит.Параметр].Порядок, Реквизит.Идентификатор);
				Последовательность.Словарь[Реквизит.Идентификатор] = Реквизит;
				РассчитанныеРеквизиты[Реквизит.Идентификатор] = Реквизит;
				ДобавитьЗависимыеРеквизиты(Контекст, Модель, Реквизит, Последовательность, ИспользованныеСвязи);
				Последовательность.Список.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			КонецЕсли;
		КонецЦикла;

		ИзмененныеРеквизиты.Очистить();
		Если Последовательность.Список.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Реквизит = Последовательность.Словарь[Последовательность.Список[0].Представление];
		Параметр = Модель.Параметры[Реквизит.Параметр];
		#Если Клиент Тогда
			Если (Параметр.НаСервере) Тогда
				Возврат Ложь;
			КонецЕсли;
		#КонецЕсли
		
		Если НЕ РассчитанныеРеквизиты[Реквизит.Идентификатор] = Неопределено И Реквизит.ПроверкаЗаполнения Тогда
			//  Это реквизит объекта или контекста
			Если Параметр.ЭтоЭлементКоллекции Тогда
				ИндексСтроки = Реквизит.ИндексСтроки;
				ДанныеСтроки = РаботаСМодельюКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, РаботаСМодельюКлиентСервер.ПутьКДанным(Модель, Параметр), ИмяРеквизита)[ИндексСтроки];
				Отказ = Ложь;
				ВходящиеПараметры = РаботаСМодельюКлиентСервер.ПараметрыСвязей(Контекст, Модель, Параметр, ИндексСтроки, Истина, Отказ);
				Если НЕ Отказ Тогда
					СсылкаНаЗначение = ДанныеСтроки[ИмяРеквизита];
					Если ЗначениеЗаполнено(СсылкаНаЗначение) Тогда
						Если РаботаСМодельюКлиентСервер.ОпределитьЗначение(Контекст, Объект, Модель, 
								СсылкаНаЗначение, 
								Параметр, ИндексСтроки,
								ВходящиеПараметры,
								ДанныеСтроки
							) Тогда
							Сообщить(СтрШаблон("Значение изменено %1[%2]: %3 -> %4", ИмяРеквизита, ИндексСтроки, ДанныеСтроки[ИмяРеквизита], СсылкаНаЗначение));
							ДанныеСтроки[ИмяРеквизита] = СсылкаНаЗначение;						
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Отказ = Ложь;
				ВходящиеПараметры = РаботаСМодельюКлиентСервер.ПараметрыСвязей(Контекст, Модель, Параметр,, Истина, Отказ);
				Если НЕ Отказ Тогда
					ОбъектЗначения = РаботаСМодельюКлиентСервер.ОбъектПараметра(Контекст, Модель, Параметр,, ИмяРеквизита);
					СсылкаНаЗначение = ОбъектЗначения[ИмяРеквизита];
					Если ЗначениеЗаполнено(СсылкаНаЗначение) Тогда
						Если РаботаСМодельюКлиентСервер.ОпределитьЗначение(Контекст, Объект, Модель, 
								СсылкаНаЗначение, 
								Параметр,, 
								ВходящиеПараметры
							) Тогда
							Сообщить(СтрШаблон("Значение изменено %1: %2 -> %3", ИмяРеквизита, ОбъектЗначения[ИмяРеквизита], СсылкаНаЗначение));
							ОбъектЗначения[ИмяРеквизита] = СсылкаНаЗначение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Последовательность.Словарь.Удалить(Реквизит.Идентификатор);
		Последовательность.Список.Удалить(0);
		ИндексСтроки = Реквизит.ИндексСтроки;
		ЕстьИзменение = Ложь;
		Если РассчитанныеРеквизиты[Реквизит.Идентификатор] = Неопределено Тогда
			РассчитанныеРеквизиты[Реквизит.Идентификатор] = Реквизит;
			Отказ = Ложь;
			ВходящиеПараметры = ПараметрыСвязей(Контекст, Модель, Параметр, ИндексСтроки,, Отказ);
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметр.ПутьКДанным) Тогда
				//  Это реквизит объекта или контекста
				Если Параметр.ЭтоЭлементКоллекции Тогда
					ДанныеСтроки = ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, Параметр), ИмяРеквизита)[ИндексСтроки];
					ЕстьИзменение = ОпределитьЗначение(Контекст, Объект, Модель, 
						ДанныеСтроки[ИмяРеквизита], 
						Параметр, ИндексСтроки,
						ВходящиеПараметры,
						ДанныеСтроки
					);
				Иначе
					ЕстьИзменение = ОпределитьЗначение(Контекст, Объект, Модель,
						ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, Параметр), ИмяРеквизита)[ИмяРеквизита],
						Параметр,,
						ВходящиеПараметры
					);
				КонецЕсли;
			Иначе
				//  Это чистый параметр
				ЕстьИзменение = ОпределитьЗначение(Контекст, Объект, Модель, 
					ОбъектПараметра(Контекст, Модель, Параметр,, ИмяРеквизита)[ИмяРеквизита], 
					Параметр,, 
					ВходящиеПараметры
				);
			КонецЕсли;
			Если ЕстьИзменение Тогда
				//ИзмененныеРеквизиты.Добавить(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор, ИндексСтроки));
				ДобавитьЗависимыеРеквизиты(Контекст, Модель, Реквизит, Последовательность, ИспользованныеСвязи);
				Последовательность.Список.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			КонецЕсли;
		Иначе
			ЕстьИзменение = Истина;
		КонецЕсли;
		
		Если ЕстьИзменение Тогда
			//Сообщить("ПриИзменении " + ИмяКонтекста + ": " + Реквизит.Идентификатор);
			Параметр = Модель.Параметры[Реквизит.Параметр];
			ОбработчикПриИзменении = Параметр.ПриИзменении;
			Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
				Если ОбработчикПриИзменении = "*" Тогда
					ОбработчикПриИзменении = СтрШаблон("%1.ПриИзменении%2(Контекст, Объект, ДанныеСтроки, Реквизит, ИзмененныеРеквизиты, РассчитанныеРеквизиты)", Модель.Модуль, Параметр.Идентификатор);
				КонецЕсли;
				Если Реквизит.ИндексСтроки <> Неопределено Тогда
					ДанныеСтроки = ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДанным(Модель, Реквизит.Параметр), ИмяРеквизита)[Реквизит.ИндексСтроки];
				Иначе
					ДанныеСтроки = Неопределено;
				КонецЕсли;
				ВыполнитьОбработчикПриИзменении(ОбработчикПриИзменении, Контекст, Объект, ДанныеСтроки, Реквизит, ИзмененныеРеквизиты, РассчитанныеРеквизиты);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ИзмененныеРеквизиты = ОбщийКлиентСервер.СоответствиеВМассив(РассчитанныеРеквизиты);
	Возврат Истина;
КонецФункции

#КонецОбласти
