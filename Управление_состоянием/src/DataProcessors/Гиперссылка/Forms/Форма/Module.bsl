// https://gist.github.com/KalyakinAG/88588b2c3925f8a465851bce52dbab13
#Область УправлениеСостоянием

&НаСервере
Процедура ОбновитьФормуНаСервере(ИзмененныеРеквизиты = Неопределено, СохраненноеСостояние = Неопределено)
	РаботаСФормойКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(ИзмененныеРеквизиты = Неопределено)
	Перем СохраненноеСостояние;
	Если НЕ РаботаСФормойКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние) Тогда
		ОбновитьФормуНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

//@skip-warning
&НаКлиенте
Процедура ПриАктивизацииСтроки(Элемент)
	РаботаСФормойКлиентСервер.ПриАктивизацииСтроки(ЭтотОбъект, Элемент);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСФормойКлиентСервер.НачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#Область ПриИзменении // При расчете может потребоваться изменить контекст, а сделать это можно только в модуле формы

//@skip-warning
//  Процедура продолжает расчет уже в контексте сервера. Такое разделение процедуры нужно для программного переключения контекста
&НаСервере
Процедура РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние)
	РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние);
	ОбновитьФормуНаСервере(ИзмененныеРеквизиты);
КонецПроцедуры

//  Процедура выполняет расчет в контексте клиента
&НаКлиенте
Процедура РассчитатьСостояние(ИзмененныеРеквизиты)
	Перем СохраненноеСостояние;
	Если НЕ РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние) Тогда
		РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние);
	Иначе
		ОбновитьФорму(ИзмененныеРеквизиты);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПриИзменении(Элемент)
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	Параметр = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьЗначение = ТипЗнч(Элемент) = Тип("ПолеФормы")
		И Элемент.Вид = ВидПоляФормы.ПолеВвода
		И Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	
	Если Параметр.ЭтоЭлементКоллекции Тогда
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор, 
			РаботаСМодельюКлиентСервер.ЗначениеПараметра(ЭтотОбъект, Модель, Модель.Параметры[Параметр.Коллекция + ".ИндексСтроки"],
			ПроверятьЗначение)));
	Иначе
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор,, ПроверятьЗначение));
	КонецЕсли;
	РассчитатьСостояние(ИзмененныеРеквизиты);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//  Создание описания модели. Начало
	// В отличии от предыдущих примеров здесь нужно обязательно указать путь к данным объекта!
	// Дело в том, что в форме заявки модель создавалась через менеджер объекта, 
	// а здесь напрямую из подсистемы Управление состоянием.
	Модель = РаботаСМодельюКлиентСервер.Модель("МодельГиперссылка", "Объект");
	//  Описание самой формы
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.Адрес_Заголовок,, "Адрес,АдресЗаполнен");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.Адрес_КомандаОчистить,, "АдресЗаполнен");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.Адрес_КомандаРедактировать,, "АдресЗаполнен");
	//  Параметры состояния
	РаботаСМодельюКлиентСервер.Связь(ЭтотОбъект, Модель, "АдресЗаполнен", "Адрес");
	Модель.Параметры["АдресЗаполнен"].Выражение = "ЗначениеЗаполнено(Параметры.Адрес)";
	//  Создание описания модели. Конец
	
	РаботаСМоделью.Инициализировать(ЭтотОбъект, Модель);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Отображение состояния формы в контексте клиента, 
	// т.к. параметр Адрес должен восстановиться из сохраненных параметров формы.
	// Также здесь необходимо вызвать процедуру расчета зависимого параметра: АдресЗаполнен
	//РаботаСМодельюКлиентСервер.РассчитатьПроизводныеПараметры(ЭтотОбъект);// расчет зависимого параметра
	//НастроитьФорму();// отображение формы с актуальными значениями параметров
	// Второй вариант более правильный и короткий, однако требует знания списка измененных реквизитов:
	РассчитатьСостояние(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит("Адрес")));
КонецПроцедуры

&НаКлиенте
Процедура Адрес_ЗаголовокНажатие(Элемент)
	ОбработкаОповещения = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.Адрес) Тогда
		ЗапуститьПриложение(Объект.Адрес);
	Иначе
		ПоказатьВводСтроки(ОбработкаОповещения, Объект.Адрес, "", 0, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Адрес_КомандаРедактироватьНажатие(Элемент)
	ОбработкаОповещения = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);
	ПоказатьВводСтроки(ОбработкаОповещения, Объект.Адрес, "", 0, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Строка, Параметры) Экспорт
	Перем ИзмененныеРеквизиты;
	Если Строка <> Неопределено Тогда
		РаботаСМодельюКлиентСервер.УстановитьЗначение(ЭтотОбъект, "Адрес",, Строка, ИзмененныеРеквизиты);
		Если ИзмененныеРеквизиты.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
		РассчитатьСостояние(ИзмененныеРеквизиты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Адрес_КомандаОчиститьНажатие(Элемент)
	Перем ИзмененныеРеквизиты;
	РаботаСМодельюКлиентСервер.УстановитьЗначение(ЭтотОбъект, "Адрес",, "", ИзмененныеРеквизиты);
	Если ИзмененныеРеквизиты.Количество() > 0 Тогда
		Модифицированность = Истина;
	КонецЕсли;
	РассчитатьСостояние(ИзмененныеРеквизиты);
КонецПроцедуры
