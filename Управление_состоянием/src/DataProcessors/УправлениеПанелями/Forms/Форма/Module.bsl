#Область УправлениеСостоянием

&НаСервере
Процедура ОбновитьФормуНаСервере(ИзмененныеРеквизиты = Неопределено, СохраненноеСостояние = Неопределено)
	РаботаСФормойКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(ИзмененныеРеквизиты = Неопределено)
	Перем СохраненноеСостояние;
	Если НЕ РаботаСФормойКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние) Тогда
		ОбновитьФормуНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

//@skip-warning
&НаКлиенте
Процедура ПриАктивизацииСтроки(Элемент)
	РаботаСФормойКлиентСервер.ПриАктивизацииСтроки(ЭтотОбъект, Элемент);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСФормойКлиентСервер.НачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#Область ПриИзменении // При расчете может потребоваться изменить контекст, а сделать это можно только в модуле формы

//@skip-warning
//  Процедура продолжает расчет уже в контексте сервера. Такое разделение процедуры нужно для программного переключения контекста
&НаСервере
Процедура РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние)
	РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние);
	ОбновитьФормуНаСервере(ИзмененныеРеквизиты);
КонецПроцедуры

//  Процедура выполняет расчет в контексте клиента
&НаКлиенте
Процедура РассчитатьСостояние(ИзмененныеРеквизиты)
	Перем СохраненноеСостояние;
	Если НЕ РаботаСМодельюКлиентСервер.РассчитатьСостояние(ЭтотОбъект, ИзмененныеРеквизиты, СохраненноеСостояние) Тогда
		РассчитатьСостояниеНаСервере(ИзмененныеРеквизиты, СохраненноеСостояние);
	Иначе
		ОбновитьФорму(ИзмененныеРеквизиты);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПриИзменении(Элемент)
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	Параметр = Модель.Параметры[Модель.ПараметрыЭлементов[Элемент.Имя]];
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьЗначение = ТипЗнч(Элемент) = Тип("ПолеФормы")
		И Элемент.Вид = ВидПоляФормы.ПолеВвода
		И Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	
	Если Параметр.ЭтоЭлементКоллекции Тогда
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор, 
			РаботаСМодельюКлиентСервер.ЗначениеПараметра(ЭтотОбъект, Модель, Модель.Параметры[Параметр.Коллекция + ".ИндексСтроки"],
			ПроверятьЗначение)));
	Иначе
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаСМодельюКлиентСервер.Реквизит(Параметр.Идентификатор,, ПроверятьЗначение));
	КонецЕсли;
	РассчитатьСостояние(ИзмененныеРеквизиты);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//  Создание описания модели. Начало
	Модель = РаботаСМодельюКлиентСервер.Модель("МодельУправлениеПанелями", "Объект");
	//  Описание элементов формы
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаЛеваяПанель,, "ВидимостьЛевойПанели");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаПраваяПанель,, "ВидимостьПравойПанели");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.ГруппаНижняяПанель,, "ВидимостьНижнейПанели");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.КомандаВключитьЛевуюПанель,, "ВидимостьЛевойПанели");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.КомандаВключитьПравуюПанель,, "ВидимостьПравойПанели");
	РаботаСФормойКлиентСервер.Элемент(ЭтотОбъект, Модель, Элементы.КомандаВключитьНижнююПанель,, "ВидимостьНижнейПанели");
	//  Создание описания модели. Конец
	РаботаСМоделью.Инициализировать(ЭтотОбъект, Модель);//  Связывание формы с моделью
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Отображение состояния формы в контексте клиента, 
	// т.к. некоторые параметры формы должны восстановиться из сохраненных
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПанели(ИмяПараметра)
	Перем ИзмененныеРеквизиты;
	Модель = РаботаСМодельюКлиентСервер.МодельОбъекта(ЭтотОбъект);
	Параметр = Модель.Параметры[ИмяПараметра];
	ТекущаяВидимость = РаботаСМодельюКлиентСервер.ЗначениеПараметра(ЭтотОбъект, Модель, Параметр);
	//  Установка нового значения признака видимости панели
	РаботаСМодельюКлиентСервер.УстановитьЗначение(ЭтотОбъект, ИмяПараметра,, НЕ ТекущаяВидимость, ИзмененныеРеквизиты);
	//  Вызов функции расчета состояния модели формы и рендеринг 
	РассчитатьСостояние(ИзмененныеРеквизиты);
	ОбновитьФорму(ИзмененныеРеквизиты);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьЛевуюПанель(Команда)
	ИзменитьВидимостьПанели("ВидимостьЛевойПанели");
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьПравуюПанель(Команда)
	ИзменитьВидимостьПанели("ВидимостьПравойПанели");
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьНижнююПанель(Команда)
	ИзменитьВидимостьПанели("ВидимостьНижнейПанели");
КонецПроцедуры
